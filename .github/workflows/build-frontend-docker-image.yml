name: Build Frontend Docker Image

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🧩 เตรียมโฟลเดอร์เก็บ report
      - name: Create reports directory
        run: mkdir -p reports

      # ✅ ตรวจสอบว่า MySQL พร้อมใช้งานแล้ว
      - name: Test MySQL Connection
        run: |
          echo "⏳ Checking MySQL readiness..." | tee -a reports/mysql_logs.txt
          for i in {1..10}; do
            if mysql -h 127.0.0.1 -uroot -proot -e "SELECT VERSION();" >/dev/null 2>&1; then
              echo "✅ MySQL is ready!" | tee -a reports/mysql_logs.txt
              exit 0
            fi
            echo "❌ MySQL not ready yet... retrying ($i/10)" | tee -a reports/mysql_logs.txt
            sleep 5
          done
          echo "❌ MySQL did not start in time." | tee -a reports/mysql_logs.txt
          exit 1

      # 🧪 ทดสอบ query จริงในฐานข้อมูล
      - name: Run sample SQL query
        run: |
          echo "🧪 Running test query..." | tee -a reports/mysql_logs.txt
          mysql -h 127.0.0.1 -uroot -proot testdb -e "CREATE TABLE users(id INT PRIMARY KEY, name VARCHAR(50));"
          mysql -h 127.0.0.1 -uroot -proot testdb -e "INSERT INTO users VALUES (1, 'Ploy');"
          mysql -h 127.0.0.1 -uroot -proot testdb -e "SELECT * FROM users;" | tee -a reports/mysql_logs.txt

      # 🧱 ตั้งค่า Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Clean npm cache
        run: npm cache clean --force

      # 🧪 ทดสอบรัน dev server แบบ background
      - name: Install and Run dev test
        run: |
          cd ./frontend
          npm install
          echo "🚀 Starting dev server..." | tee -a ../reports/frontend_devtest_log.txt
          npm run dev &>> ../reports/frontend_devtest_log.txt &
          sleep 10
          curl -I http://localhost:5173 >> ../reports/frontend_devtest_log.txt || true
          pkill -f "vite" || true
          echo "🧾 Dev test completed." >> ../reports/frontend_devtest_log.txt

      # 🧩 Build frontend และเก็บ log
      - name: Build project
        working-directory: ./frontend
        run: |
          echo "🏗️ Building frontend..." | tee -a ../reports/frontend_build_log.txt
          npm run build 2>&1 | tee -a ../reports/frontend_build_log.txt

      # 🐳 Build Docker image และเก็บ log
      - name: Build Docker image
        run: |
          echo "🐳 Building Docker image..." | tee -a reports/docker_build_log.txt
          docker build -t hello-devops-frontend:latest ./frontend 2>&1 | tee -a reports/docker_build_log.txt

      # 🔐 Login Docker Hub
      - name: Login to Docker Hub
        run: echo dckr_pat_VJu4lYTGkJU9meYspQ3U2XkUjW4 | docker login -u u6687032 --password-stdin

      # 📦 Push image และเก็บ log
      - name: Push image to Docker Hub
        if: success()
        run: |
          echo "🚀 Pushing image to Docker Hub..." | tee -a reports/docker_build_log.txt
          docker tag hello-devops-frontend:latest u6687032/hello-devops-frontend:latest
          docker push u6687032/hello-devops-frontend:latest 2>&1 | tee -a reports/docker_build_log.txt

      # ✅ อัปโหลดทั้งหมดเป็น artifact
      - name: Upload reports to GitHub
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-reports
          path: reports/
