name: Build Frontend Docker Image

on:
  push:
    branches: [ main, develop]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
   # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° MySQL ‡πÄ‡∏õ‡πá‡∏ô service ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô workflow ‡∏ô‡∏µ‡πâ
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      backend:
        image: u6687032/hello-devops-backend:latest   # üëà ‡πÉ‡∏ä‡πâ image ‡∏ó‡∏µ‡πà push ‡∏à‡∏≤‡∏Å backend repo
        ports:
          - 8080:8080
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/sombun_db
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root
        options: >-
          --health-cmd="curl -f http://localhost:8080/api/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MySQL ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      - name: Test MySQL Connection
        run: |
          echo "‚è≥ Checking MySQL readiness..."
          for i in {1..10}; do
            if mysql -h 127.0.0.1 -uroot -proot -e "SELECT VERSION();" >/dev/null 2>&1; then
              echo "‚úÖ MySQL is ready!"
              exit 0
            fi
            echo "‚ùå MySQL not ready yet... retrying ($i/10)"
            sleep 5
          done
          echo "‚ùå MySQL did not start in time."
          exit 1

      # (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á) ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      - name: Run sample SQL query
        run: |
          echo "üß™ Running test query..."
          mysql -h 127.0.0.1 -uroot -proot testdb -e "CREATE TABLE users(id INT PRIMARY KEY, name VARCHAR(50));"
          mysql -h 127.0.0.1 -uroot -proot testdb -e "INSERT INTO users VALUES (1, 'Ploy');"
          mysql -h 127.0.0.1 -uroot -proot testdb -e "SELECT * FROM users;"
          
      - name: Login to Docker Hub
        run: |
          echo dckr_pat_VJu4lYTGkJU9meYspQ3U2XkUjW4 | docker login -u u6687032 --password-stdin
          
      - name: Wait for backend to be ready
        run: npx wait-on http://localhost:8080/api/health
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Clean npm cache
        run: npm cache clean --force

      - name: Install and Run dev test and E2E
        run: |
          cd ./frontend
          npm install
          npm run dev &              # üîπ ‡∏£‡∏±‡∏ô dev server ‡πÅ‡∏ö‡∏ö background
          sleep 10                   # üîπ ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡πâ server ‡πÄ‡∏£‡∏¥‡πà‡∏°
          curl -I http://localhost:5173 || true  # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ server ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
          npx cypress run            # E2E run test
          pkill -f "vite"            # üîπ ‡∏´‡∏¢‡∏∏‡∏î process dev server
          
      - name: Build project
        working-directory: ./frontend
        run: 
          npm run build 
        
      - name: Build Docker image
        run: |
          docker build -t hello-devops-frontend:latest ./frontend
          
      # Build and push image to Docker Hub
      - name: Build and push image to Docker Hub
        if: success()
        run: |
          echo dckr_pat_VJu4lYTGkJU9meYspQ3U2XkUjW4 | docker login -u u6687032 --password-stdin
          docker tag hello-devops-frontend:latest u6687032/hello-devops-frontend:latest
          docker push u6687032/hello-devops-frontend:latest
